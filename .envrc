#!/usr/bin/env direnv

# Pull in local configurations
source_env_if_exists $PWD/.envrc.*

# Let's add some discretion over the rebuilds so it's not annoying.
[[ "${NIX_DIRENV_MANUAL_RELOAD:-0}" -eq 1 ]] && nix_direnv_manual_reload

watches=(
  $PWD/.direnv/flake-profile-*
  $PWD/**/*.nix
)

for watch in "${watches[@]}"; do
  readarray -t files < <(find "$watch" -type f -print)
  nix_direnv_watch_file "${files[@]}"
done

# direnv and nix-direnv play interestingly here.
# essentially direnv watches this .envrc, triggering
# the invocation of a Nix shell. After the Nix shell is
# spawned here, nix-direnv more or less re-evaluates this
# .envrc. However, since nothing actually changed, the cache
# that we built to even implement the environment derivation
# is still there, so we can use it as is.
# Nix then loads in this .envrc, injecting its environment into
# the now exported direnv environment.
if [[ "${IN_NIX_SHELL}" -eq 0 ]]; then
  use flake
fi
